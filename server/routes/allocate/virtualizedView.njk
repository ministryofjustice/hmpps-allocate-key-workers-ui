{% extends "partials/layout.njk" %}
{% from "moj/components/date-picker/macro.njk" import mojDatePicker %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "partials/mojPagination/macro.njk" import mojPagination %}
{% from "partials/deallocateSuccessError/macro.njk" import deallocateSuccessError %}
{% from "partials/alertFlags/macro.njk" import alertFlags %}
{%- from "moj/components/alert/macro.njk" import mojAlert -%}

{% set fullWidth = true %}
{% set pageTitle -%}
  Allocate {{ policyStaffs }} to prisoners
{%- endset %}

{% block pageHeader %}
  {% if allocationResult %}
    {% if allocationResult.type == 'SUCCESS' %}
      {{ mojAlert({
        variant: 'success',
        title: 'Changes made successfully',
        showTitleAsHeading: true,
        text: 'You have successfully allocated '+ (('a ' + policyStaff) if allocationResult.staffCount == 1 else policyStaffs) + ' to ' + allocationResult.count + (' prisoner.' if allocationResult.count == 1 else ' prisoners.'),
        classes: 'govuk-!-margin-bottom-0 govuk-!-margin-top-5'
      }) }}
    {% elseif allocationResult.type == 'NO_CAPACITY_FOR_AUTO_ALLOCATION' %}
      {% set errorHtml %}
        <p>{{ policyStaffs | sentenceCase }} could not be recommended for any prisoners who do not currently have a {{ policyStaff }}. This is because none of your {{ policyStaffs }} have available capacity.</p>
        <p>To assign {{ policyStaffs }} to these prisoners, you can:</p>
        <p>
          <ul class="govuk-list govuk-list--bullet">
            <li>manually select {{ policyStaffs }} for these prisoners using the dropdown lists</li>
            <li>review the capacities of your {{ policyStaffs }} in <a href="/{{ policyPath }}/manage">manage {{ policyStaffs }}</a> and update their capacities in their individual profiles</li>
          </ul>
        </p>
      {% endset %}

      {{ mojAlert({
        variant: 'error',
        title: 'Not enough available capacity to assign any ' + policyStaffs,
        showTitleAsHeading: true,
        html: errorHtml,
        classes: 'govuk-!-margin-bottom-0 govuk-!-margin-top-5'
      }) }}
    {% endif %}
  {% else %}
    {{ deallocateSuccessError(apiError, count) }}
  {% endif %}
{% endblock %}

{% set rows = [] %}
{% for item in records %}
  {% set rows = (rows.push({
    height: (130 if item.remainingAlertCount > 0 else 105 ) if item.relevantAlertCodes.length === 2 else 96,
    cols: [
    {
      html: '<a class="govuk-link--no-visited-state" target="_blank" href="' + prisonerProfileUrl + '/prisoner/' + item.personIdentifier + '">' + item | lastNameCommaFirstName + "</a><br/>" + item.personIdentifier,
      attributes: {
      "data-sort-value": item | lastNameCommaFirstName
    }
    },
    {
      text: item.location
    },
    {
      html: alertFlags(prisonerProfileUrl + '/prisoner/' + item.personIdentifier + '/alerts/active', item.relevantAlertCodes, item.remainingAlertCount),
      attributes: {
      "data-sort-value": item | alertsSortValue
    }
    },
    {
      html: ('<a class="govuk-link--no-visited-state" href="staff-profile/' + item.staffMember.staffId + '">' + item.staffMember | lastNameCommaFirstName + " (allocations: " + (item.staffMember.allocationCount or 0) + ") </a>") if item.staffMember else 'None',
      attributes: {
      "data-sort-value": item.staffMember | lastNameCommaFirstName
    }
    },
    {
      isSelect: not item.hasHighComplexityOfNeeds,
      html: 'Not applicable - high complexity of need' if item.hasHighComplexityOfNeeds else govukSelect({
      attributes: {
        'staff-id': item.staffMember.staffId or '',
        'person-id': item.personIdentifier
      },
      id: "selectStaffMember-" + loop.index0,
      name: "selectStaffMember",
      text: 'Select ' + policyStaff,
      formGroup: {
        classes: "govuk-!-margin-0"
      },
      items: [] | addSelectValue('Select ' + policyStaff, true, '', true) | addSelectValue(longestOption, true)
    })
    } if user | hasPermission('allocate') else undefined,
    {
      html: '<a class="govuk-link govuk-link--no-visited-state" href="/' + policyPath + '/prisoner-allocation-history/' + item.personIdentifier + '">View allocation history</a>' if item.hasAllocationHistory else ''
    }
  ] | removeNullish
  }), rows) %}
{% endfor %}

{% block innerContent %}
  <h1 class="govuk-heading-l govuk-!-margin-bottom-6">{{ pageTitle }}</h1>

  <div class="govuk-width-container">
    <div class="govuk-grid-row">

      <div class="govuk-grid-column-full-width">
        <p class="govuk-!-padding-left-3">You must select or enter text into at least one search option below.</p>

        <form method="post" action="/{{ policyPath }}/allocate/filter" class="govuk-grid-row govuk-!-margin-right-0 govuk-!-margin-left-0 govuk-!-margin-bottom-7 govuk-!-padding-top-4 govuk-!-padding-bottom-2 govuk-!-padding-left-4 govuk-!-padding-right-4 search-form">
          <input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
          <input type="hidden" name="js" value="true"/>
          <h2 id="searchBy" class="govuk-heading-m">Search by</h2>
          <div class="horizontal-form">
            {{ govukInput({
              id: "query",
              name: "query",
              value: query,
              classes: "min-width-one-quarter",
              label: {
                text: 'Name or prison number'
              }
            }) }}

            {{ govukSelect({
              id: "cellLocationPrefix",
              name: "cellLocationPrefix",
              classes: "min-width-one-quarter",
              label: {
                text: "Residential location"
              },
              items: locations | addSelectValue('') | setSelectedValue(cellLocationPrefix)
            }) }}

            {{ govukCheckboxes({
              name: "excludeActiveAllocations",
              classes: "horizontal-checkbox",
              items: [
                {
                  value: "true",
                  text: "Prisoners without a " + policyStaff,
                  checked: excludeActiveAllocations
                }
              ]
            }) }}

            <br/>
          </div>
          <div class="govuk-button-group govuk-!-margin-top-3 govuk-!-margin-bottom-0">
            {{ govukButton({
                text: "Search",
                preventDoubleClick: true
              }) }}
            <a class="govuk-link govuk-link--no-visited-state" href="/{{ policyPath }}/allocate">Clear</a>
          </div>
        </form>
      </div>
    </div>


    {% if user | hasPermission('allocate') %}
      <div class="govuk-grid-row">
        <div class="govuk-grid-column-three-quarters">
          {% if records and records.length > 0 %}
            <p>Use the dropdown lists to assign {{ policyStaffs }} to prisoners or deallocate them.<br/>Changes will only take affect when you select save.</p>
          {% endif %}
          {% if allowAutoAllocation %}
            <p>Select ‘Assign {{ policyStaffs }} automatically’ to get {{ policyStaff }} recommendations for all prisoners without a current {{ policyStaff }}.{% if records and records.length > 0 %} You should save any changes you’ve made before selecting this.{% endif %}</p>
          {% endif %}
        </div>
      </div>
    {% endif %}

    {% if allowAutoAllocation and user | hasPermission('allocate')%}
      <div class="govuk-grid-row">
        {{ govukButton({
          text: "Assign " + policyStaffs + " automatically",
          classes: "govuk-button--secondary float-right govuk-!-margin-bottom-2",
          preventDoubleClick: true,
          href: '/' + policyPath + '/recommend-allocations'
        }) }}
      </div>
    {% endif %}

    {% if records.length == 0 %}
      <p> No results for this search criteria.
    {% elif records.length > 0 %}
      <form method="post">
        <input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
        {{ mojPagination(records.length) }}

      {{ govukTable({
        classes: 'table-vertical-align-middle govuk-!-margin-top-6 center-align-content sticky-table-heading',
        head: [
          {
            html: '<button>Name and prisoner number</button>',
            key: 'name',
            attributes: {
            "aria-sort": "ascending"
          }
          },
          {
            html: "<button>Residential location</button>",
            key: 'location',
            attributes: {
            "aria-sort": "none"
          }
          },
          {
            classes: 'alert-badge-column',
            html: "<button>Relevant alerts</button>",
            key: 'alerts',
            attributes: {
            "aria-sort": "none"
          }
          },
          {
            html: "<button>" + policyStaff | sentenceCase + "</button>",
            key: policyStaff,
            attributes: {
            "aria-sort": "none"
          }
          },
          {
            text: "Change " + policyStaff,
            key: 'change'
          } if user | hasPermission('allocate') else undefined,
          {
            text: ""
          }
        ] | removeNullish,
        rows: []
      }) }}

        {{ mojPagination(records.length) }}

        {% if user | hasPermission('allocate') %}
          <div class="sticky-action-bar">
            <div class="govuk-body sticky-action-bar--label">
              <strong class="change-count"></strong> <span class="clear-select">Clear</span>
            </div>
            {{ govukButton({
              classes: "govuk-!-margin-bottom-0 govuk-button--secondary",
              text: "Save changes",
              preventDoubleClick: true
            }) }}
          </div>
        {% endif %}
      </form>
    {% endif %}
  </div>
{% endblock %}

{% block pageScripts %}
  <script nonce="{{ cspNonce }}">
    const $upArrow = `<svg width="22" height="22" focusable="false" aria-hidden="true" role="img" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.5625 15.5L11 6.63125L15.4375 15.5H6.5625Z" fill="currentColor"/>
</svg>`
    const $downArrow = `<svg width="22" height="22" focusable="false" aria-hidden="true" role="img" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.4375 7L11 15.8687L6.5625 7L15.4375 7Z" fill="currentColor"/>
</svg>`
    const $upDownArrow = `<svg width="22" height="22" focusable="false" aria-hidden="true" role="img" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.1875 9.5L10.9609 3.95703L13.7344 9.5H8.1875Z" fill="currentColor"/>
<path d="M13.7344 12.0781L10.9609 17.6211L8.1875 12.0781H13.7344Z" fill="currentColor"/>
</svg>`

    const updateSortableHeaderStyle = ($headings) => {
      for (const $heading of $headings) {
        const $button = $heading.querySelector('button')
        if ($heading.hasAttribute('aria-sort') && $button) {
          var _$button$querySelector
          const direction = $heading.getAttribute('aria-sort')
          ;(_$button$querySelector = $button.querySelector('svg')) == null || _$button$querySelector.remove()
          switch (direction) {
            case 'ascending':
              $button.insertAdjacentHTML('beforeend', $upArrow)
              break
            case 'descending':
              $button.insertAdjacentHTML('beforeend', $downArrow)
              break
            default:
              $button.insertAdjacentHTML('beforeend', $upDownArrow)
          }
        }
      }
    }

    const rowData = {{ rows | dump | safe }}

    const staff = {{ staff | dump | safe }}

    const createOption = (text, value, selected) => {
      const option = document.createElement('option')
      option.text = text
      option.value = value
      if (selected) {
        option.selected = selected
      }
      return option
    }

    const dropdownListener = (e) => {
      const select = e.target
      if (select.children.length > 2) return
      // Delete all children after the first
      select.innerHTML = ''
      const staffId = select.attributes['staff-id']?.value || ''
      const personId = select.attributes['person-id']?.value || ''
      const recommendedId = select.attributes['recommended-id']?.value || ''
      // Insert Select (policyName) as first option always
      select.appendChild(createOption(`Select {{ policyStaff }}`, ''))
      // Equal to conditionallyAddDeallocate
      if (staffId) {
        select.appendChild(createOption('Deallocate', `${personId}:deallocate:${staffId}`))
      }
      staff.forEach(option => {
        let opt = createOption(option.text, option.value)
        // Equal to excludeCurrentStaffMember
        if (staffId && opt.value.includes(`:${staffId}`)) {
          return
        }
        if (recommendedId && opt.value.includes(`:${recommendedId}`)) {
          opt.selected = true
        }
        // Equal to mergePrisonerKeyworkerIds
        opt.value = `${personId}:${opt.value}`
        select.appendChild(opt)
      })
    }

    const updateActionBar = () => {
      const changeCount = rowData.filter(row => row.selected).length
      if (changeCount) {
        document.querySelector('.sticky-action-bar').style.display = 'flex'
        document.querySelector('.change-count').innerHTML = `${changeCount} change${ changeCount === 1 ? '' : 's' } selected`
      } else {
        document.querySelector('.sticky-action-bar').style.display = 'none'
      }
    }

    window.onload = function () {
      const $headings = Array.from(document.querySelectorAll('th')).filter($heading => $heading.hasAttribute('aria-sort') && $heading.querySelector('button'))
      updateSortableHeaderStyle($headings)

      const ROWS_TO_SHOW = 13
      const BUFFER_ROWS = 5

      const RECORD_COUNT = {{ records.length }}

      let startRow = 0

      const container = document.querySelector('tbody')
      container.style.height = rowData.map(row => row.height).reduce((a, b) => a + b, 0) + 'px'

      const renderRows = (start) => {
        const renderFrom = Math.max(0, start - BUFFER_ROWS)
        const renderTo = Math.min(RECORD_COUNT - 1, start + ROWS_TO_SHOW + BUFFER_ROWS )
        container.innerHTML = ''
        if (renderFrom > 0) {
          const placeHolderRow = document.createElement('tr')
          placeHolderRow.classList = "govuk-table__row"
          placeHolderRow.style.height = Array(renderFrom).fill().map((_,i) => rowData[i].height).reduce((a, b) => a + b, 0) + 'px'
          container.appendChild(placeHolderRow)
        }

        for (let index = renderFrom; index <= renderTo; index++) {
          const row = document.createElement('tr')
          row.classList = "govuk-table__row"
          row.style.height = rowData[index].height + 'px'
          row.innerHTML = rowData[index].cols.map(val => `<td class="govuk-table__cell">${val?.html?.val ?? val.html ?? val.text}</td>`).join('')
          if (rowData[index].cols[4].isSelect) {
            const select = row.querySelector('.govuk-select')
            if (rowData[index].selected) {
              dropdownListener({ target: select })
              select.value = rowData[index].selected
            } else {
              select.addEventListener('click', dropdownListener)
            }

            select.addEventListener('change', (e)=>{
              rowData[index].selected = e.target.value
              updateActionBar()
            })
          }
          container.appendChild(row)
        }

        if (renderTo < RECORD_COUNT - 1) {
          const placeHolderRow = document.createElement('tr')
          placeHolderRow.classList = "govuk-table__row"
          placeHolderRow.style.height = Array(RECORD_COUNT - 1 - renderTo).fill().map((_,i) => rowData[renderTo + 1 + i].height).reduce((a, b) => a + b, 0) + 'px' + 'px'
          container.appendChild(placeHolderRow)
        }

        rowData.forEach((val, idx) => {
          if (val.selected && (idx < renderFrom || idx > renderTo)) {
            const hiddenInput = document.createElement('input')
            hiddenInput.id = 'selectStaffMember-' + idx
            hiddenInput.name = 'selectStaffMember'
            hiddenInput.setAttribute('hidden', true)
            hiddenInput.value = val.selected
            container.appendChild(hiddenInput)
          }
        })
      }

      renderRows(startRow)

      const getStartRow = (scrollTop) => {
        let top = scrollTop
        let result = 0
        for (const idx in rowData) {
          if (top < rowData[idx].height) {
            return result
          }
          result++
          top -= rowData[idx].height
        }
        return result
      }

      window.addEventListener('scroll', (e) => {
        const scrollTop = Math.max(-container.getBoundingClientRect().y, 0);
        const newStartRow = getStartRow(scrollTop)
        if (Math.abs(newStartRow - startRow) > BUFFER_ROWS) {
          startRow = newStartRow
          renderRows(startRow)
        }
        e.preventDefault && e.preventDefault();
      });

      const sortData = (headingIdx, direction = 1) => {
        rowData.sort((a, b) => {
          const aVal = a.cols[headingIdx].attributes?.['data-sort-value'] ?? a.cols[headingIdx].text ?? ''
          const bVal = b.cols[headingIdx].attributes?.['data-sort-value'] ?? b.cols[headingIdx].text ?? ''
          return aVal.localeCompare(bVal) * direction
        })
        renderRows(startRow)
      }

      document.querySelector('.clear-select').addEventListener('click', e => {
        rowData.forEach(row => { delete row.selected })
        updateActionBar()
        renderRows(startRow)
      })

      $headings.forEach(($heading, idx) => {
        $heading.querySelector('button').addEventListener('click', (e) => {
          e.preventDefault && e.preventDefault()
          const clickedHeading = e.target.parentElement
          switch (clickedHeading.getAttribute('aria-sort')) {
            case 'ascending':
              clickedHeading.setAttribute('aria-sort', 'descending')
              sortData(idx, -1)
              break
            case 'descending':
              clickedHeading.setAttribute('aria-sort', 'ascending')
              sortData(idx)
              break
            default:
              $headings.forEach(itm => itm !== clickedHeading && itm.setAttribute('aria-sort', 'none'))
              clickedHeading.setAttribute('aria-sort', 'ascending')
              sortData(idx)
          }
          updateSortableHeaderStyle($headings)
        })
      })
    }
  </script>
{% endblock %}
